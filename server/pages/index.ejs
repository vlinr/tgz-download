<!DOCTYPE html>
<html lang="en">

<head>
    <meta charset="UTF-8">
    <meta http-equiv="X-UA-Compatible" content="IE=edge">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>TGZ Download</title>
    <style>
        * {
            padding: 0;
            margin: 0;
        }

        .card {
            display: flex;
            flex-wrap: wrap;
            color: #333;
            padding: 20px;
            /* justify-content: space-between; */
        }

        .content {
            height: calc(100vh - 95px);
            overflow: auto;
        }

        .card .item {
            width: 280px;
            box-shadow: 0 0 10px rgba(0, 0, 0, .1);
            margin-right: 10px;
            border-radius: 4px;
            padding: 10px;
            margin-bottom: 10px;
        }

        .card .item .top {
            display: flex;
            margin-bottom: 10px;
        }

        .card .item .left {
            flex: 1;
            margin-right: 10px;
            width: 0;
        }

        .card .item .left h2 {
            font-size: 14px;
            margin: 0;
            margin-bottom: 5px;
            white-space: nowrap;
            overflow: hidden;
            text-overflow: ellipsis;
        }

        .card .item .left span {
            font-size: 12px;
            color: #9e9e9e;
            display: block;
            white-space: nowrap;
            overflow: hidden;
            text-overflow: ellipsis;
        }

        .card .item .right {
            flex: 0 0 50px;
            display: flex;
            align-items: center;
            justify-content: center;

        }

        .card .item .right a {
            width: 35px;
            height: 35px;
            border-radius: 50%;
            display: block;
            display: flex;
            align-items: center;
            justify-content: center;
        }

        .card .item .right a.download {
            background: #2196f3;
            box-shadow: 0 0 10px #a7d1f3;
        }

        .card .item .right a.error {
            user-select: none;
            background-color: #de0202;
            box-shadow: 0 0 10px #f8caca;
        }

        .card .item .right a.loading {
            user-select: none;
            background-color: transparent;
            animation: rotate linear 1.5s infinite;
        }

        .card .item .right a.loading i {
            fill: #0689f8;
        }

        .card .item .right i {
            fill: #fff;
            font-size: 14px;
            width: 24px;
            height: 24px;
        }

        .card .bottom {
            width: 100%;
            font-size: 12px;
            line-height: 1.5;
        }

        @keyframes rotate {
            0% {
                transform: rotate(0deg);
            }

            100% {
                transform: rotate(-360deg);
            }
        }

        .search {
            height: 50px;
            margin-bottom: 10px;
            text-align: center;
        }

        select {
            height: 34px;
            width: 80px;
            border-radius: 4px;
            border: 1px solid rgba(0, 0, 0, .3);
            border-top-right-radius: 0;
            border-bottom-right-radius: 0;
            border-right: 0;
            outline: none;
            padding: 5px;
        }

        .input span {
            width: 240px;
            position: relative;
            display: block;
            height: 34px;
            border: 1px solid rgba(0, 0, 0, .3);
            box-sizing: border-box;
            border-right: 0;
        }

        .input span input {
            position: absolute;
            top: 0;
            outline: none;
            padding: 0 5px;
            left: 0;
            width: calc(100% - 10px);
            z-index: 1;
            border: 0;
            height: 32px;
        }

        .input span i {
            font-size: 12px;
            line-height: 34px;
            font-style: normal;
            cursor: pointer;
        }

        button {
            outline: none;
            width: 80px;
            border: 0;
            border-radius: 4px;
            border: 1px solid #1896fd;
            background-color: #2196f3;
            color: #fff;
            cursor: pointer;
            transition: all .3s ease;
            border-top-left-radius: 0;
            border-bottom-left-radius: 0;
        }

        button:hover {
            background-color: #0689f8;
        }

        .input {
            /* width: 200px; */
            display: inline-block;
            display: flex;
            justify-content: center;
            margin: 20px 0;
            padding-bottom: 20px;
            border-bottom: 1px solid rgba(0, 0, 0, .1);
        }

        .hidden {
            display: none !important;
        }

        #input.error,
        #upload.error {
            border: 1px solid red;
        }
    </style>
</head>

<body>
    <section class="box">
        <div class="search">
            <div class="input">
                <select onchange="selectChange(this)">
                    <option value="1">Input</option>
                    <option value="2">Upload</option>
                </select>
                <span id="input">
                    <input onchange="inputValue(this)" maxlength="50" placeholder="Please enter a package name" />
                </span>
                <span id="upload" class="hidden">
                    <input accept=".json,.lock" onchange="selectFile(this)"
                        style="opacity: 0;cursor: pointer;padding: 0;" type="file" />
                    <i>Select File</i>
                </span>
                <button onclick="download(this)">Start</button>
            </div>
        </div>
        <div class="content">
            <div class="card">

            </div>
        </div>
    </section>

    <script type="text/javascript">
        const input = document.querySelector('#input');
        const upload = document.querySelector('#upload');
        const content = document.querySelector('.content .card');
        let file, type = '1',
            value, loading = false,
            execute = true;

        function selectChange(target) {
            type = target.value;
            if (type === '1') {
                setClass(upload, 'hidden', true);
                setClass(input, '', true);
            } else {
                setClass(upload, '', true);
                setClass(input, 'hidden', true);
            }
            clearValue();
        }

        function clearValue() {
            input.querySelector('input').value = '';
            upload.querySelector('input').value = '';
            upload.querySelector('i').innerHTML = 'Select File';
            file = undefined;
            value = undefined;
        }

        function setClass(el, className, clear) {
            if (!clear) {
                let oldClass = el.getAttribute('class');
                className = `${oldClass.trim()} ${className}`
            }
            el.setAttribute('class', className);
        }

        function inputValue(target) {
            value = target.value;
        }

        async function download() {
            if (loading) {
                return void 0;
            }
            loading = true;
            if (type === '1') {
                if (!value) {
                    // 没有输入内容
                    setClass(input, 'error');
                } else {
                    // 输入了内容
                    downloadFile(value, false);
                }
            } else {
                if (!file) {
                    // 没有输入内容
                    setClass(upload, 'error');
                } else {
                    // 输入了内容
                    const result = await uploadFile(file);
                    if (result.code === 200) {
                        // 调用下载接口
                        downloadFile(result.data.key, true);
                    }
                }
            }
            clearValue();
            loading = false;
        }

        function downloadFile(key, file) {
            fetch('/download', {
                body: JSON.stringify({
                    file,
                    key
                }),
                headers: {
                    'content-type': 'application/json'
                },
                method: 'post'
            }).then(res => {
                if (res.ok) {
                    execute = false;
                    getData();
                }
            })
        }

        function uploadFile(file) {
            return new Promise((resolve, reject) => {
                const formData = new FormData();
                formData.append('file', file);
                // 上传文件
                fetch('/upload', {
                    body: formData,
                    headers: {
                        // 'content-type': 'application/json'
                    },
                    method: 'put'
                }).then(async result => {
                    if (result.ok) {
                        const data = await result.json();
                        resolve(data);
                    } else {
                        reject({
                            code: 500,
                            data: null,
                            message: '上传失败'
                        })
                    }
                })
            })
        }

        function selectFile(target) {
            file = target.files[0];
            upload.querySelector('i').innerHTML = file.name;
        }

        function getData() {
            fetch('/getList').then(async res => {
                if (res.ok) {
                    const item = await res.json();
                    if (item.code === 200) {
                        renderHtml(item.data);
                    }
                }
            })
        }

        getData();

        setInterval(function () {
            execute && getData();
            if (!execute) execute = true;
        }, 5000);

        function renderHtml(data = []) {
            let str = '';
            if (data.length) {
                data.forEach(item => {
                    str += `<div class="item">
                        <div class="top">
                            <div class="left">
                                <h2 title="${item.name}">${item.name}</h2>
                                <span>Create:${item.date?format(item.date,'YYYY-MM-DD HH:mm:ss'):'--------'}</span>
                            </div>
                            <div class="right">
                                <a target="${item.status === 1?'_blank':'_self'}" href="${item.status===1?item.url:'javascript:void(0);'}" class="${item.status === 0?'loading':item.status === 1?'download':'error'}">
                                    <i style="display: ${item.status===1?'block':'none'}">
                                        <svg viewBox="0 0 1024 1024" version="1.1" xmlns="http://www.w3.org/2000/svg">
                                            <path
                                                d="M544.256 605.184l244.224-244.224a31.744 31.744 0 0 1 45.056 45.056l-295.424 295.424a36.864 36.864 0 0 1-51.2 0L190.464 406.528a31.744 31.744 0 1 1 45.056-45.056l244.224 244.224V111.104a32.256 32.256 0 1 1 64 0zM153.6 902.656a32.256 32.256 0 0 1 0-64h716.8a32.256 32.256 0 0 1 0 64z">
                                            </path>
                                        </svg>
                                    </i>
                                    <i style="display: ${item.status===-1?'block':'none'}">
                                        <svg viewBox="0 0 1024 1024" version="1.1" xmlns="http://www.w3.org/2000/svg">
                                            <path
                                                d="M739.2 287c12.3 12.3 12.3 32.3 0 44.6L331.4 739.4c-12.3 12.3-32.3 12.3-44.6 0-12.3-12.3-12.3-32.3 0-44.6L694.6 287c12.3-12.3 32.3-12.3 44.6 0z"
                                                fill="" p-id="3633"></path>
                                            <path
                                                d="M286.8 287c12.3-12.3 32.3-12.3 44.6 0l407.8 407.8c12.3 12.3 12.3 32.3 0 44.6-12.3 12.3-32.3 12.3-44.6 0L286.8 331.6c-12.3-12.3-12.3-32.3 0-44.6z">
                                            </path>
                                        </svg>
                                    </i>
                                    <i style="display: ${item.status===0?'block':'none'}">
                                        <svg viewBox="0 0 1024 1024" version="1.1" xmlns="http://www.w3.org/2000/svg">
                                            <path
                                                d="M512.000427 1024c-69.12 0-136.192-13.482667-199.296-40.192a510.293333 510.293333 0 0 1-162.688-109.824A510.293333 510.293333 0 0 1 0.000427 512a35.968 35.968 0 1 1 72.021333 0 439.338667 439.338667 0 0 0 128.896 311.210667A437.717333 437.717333 0 0 0 512.000427 951.978667a439.338667 439.338667 0 0 0 311.210666-128.896A437.717333 437.717333 0 0 0 951.979093 512c0-59.392-11.562667-116.992-34.56-171.306667a440.448 440.448 0 0 0-94.293333-139.904A437.717333 437.717333 0 0 0 512.000427 71.978667 35.968 35.968 0 1 1 512.000427 0c69.12 0 136.192 13.482667 199.296 40.192a510.293333 510.293333 0 0 1 162.688 109.824 511.104 511.104 0 0 1 109.696 162.688c26.709333 63.104 40.234667 130.176 40.234666 199.296s-13.525333 136.192-40.234666 199.296a508.373333 508.373333 0 0 1-109.653334 162.688A511.104 511.104 0 0 1 512.000427 1024z"
                                                opacity=".65"></path>
                                        </svg>
                                    </i>
                                </a>
                            </div>
                        </div>
                        <div class="bottom">
                            Expire:${item.date?format(item.date + item.expire * 24 * 60 * 60 * 1000,'YYYY-MM-DD HH:mm:ss'):'--------'}
                        </div>
                    </div>`;
                })
            } else {
                str =
                    '<p style="text-align:center;color:#8a8a8a;text-align:center;flex:1">支持文件格式.lock,.json文件，支持输入package name</p>'
            }
            content.innerHTML = str;
        }

        /**
         *
         * @method 格式化日期
         * @param time:{string | number}:需要转化的日期，可以是一个日期也可以是一个时间戳也可以是秒，但是如果是日期，则以字符串传入，并且会 默认把字符串当成日期格式，如果是数字会当成时间戳或者秒
         * @param format:{string}:需要转化的格式：YYYYMMDD HHmmss w  年月日 时分秒 周  ===>除了MM 和 mm区分大小写，其余的均不区分大小写 周默认会转为 大写
         * @param seconds:{boolean}:是否使用秒
         * @param hideZero:{boolean}：是否隐藏自动补0
         * @returns string
         */

        function format(time, format, seconds = false, hideZero = false) {
            if (/(M+)/.test(format)) {
                format = replaceStringByKey(format, 'M', 'f')
            }
            format = format.toLocaleLowerCase()
            const RULES = getRules(time, seconds)
            for (const key in RULES) {
                while (RegExp(`(${key})`).test(format)) {
                    const str = RULES[key].toString()
                    if (key === 'w+') {
                        const WEEKS = ['日', '一', '二', '三', '四', '五', '六']
                        format = format.replace(RegExp.$1, WEEKS[+str])
                    } else {
                        format = format.replace(
                            RegExp.$1,
                            str.length >= 2 || hideZero ? str : fillZero(str),
                        )
                    }
                }
            }
            return format
        }

        /**
         *
         * @method 获取转换规则
         * @param seconds:{boolean}:是否使用秒
         * */
        function getRules(time, seconds) {
            if (seconds) {
                return {
                    'd+': formatDateBySeconds(time, 'd'), // 日
                    'h+': formatDateBySeconds(time, 'h'), // 时
                    'm+': formatDateBySeconds(time, 'm'), // 分
                    's+': formatDateBySeconds(time, 's'), // 秒
                }
            } else {
                const date = getDate(time)
                return {
                    'y+': date.getFullYear(), // 年
                    'f+': date.getMonth() + 1, // 月
                    'd+': date.getDate(), // 日
                    'h+': date.getHours(), // 时
                    'm+': date.getMinutes(), // 分
                    's+': date.getSeconds(), // 秒
                    'w+': date.getDay(), // 星期
                }
            }
        }

        /**
         *
         * @method 传入的是秒，则普通解析
         *
         * @param time:{number|string}:秒
         *
         * */
        function formatDateBySeconds(time, key) {
            let result = 0
            switch (key) {
                case 'h':
                    result = Math.floor((+time / 3600) % 24)
                    break
                case 'm':
                    result = Math.floor((+time / 60) % 60)
                    break
                case 's':
                    result = Math.floor(+time % 60)
                    break
                case 'd':
                    result = Math.floor(+time / 3600 / 24)
                    break
            }
            return result
        }

        /**
         *
         * @method 替换掉M
         *
         * */
        function replaceStringByKey(str, key, replace) {
            let result = ''
            for (let i = 0; i < str.length; ++i) {
                const item = str[i]
                if (item === key) {
                    result += replace
                    continue
                }
                result += item
            }
            return result
        }

        /**
         *
         * @method 补0
         *
         * */
        function fillZero(num) {
            return `0${num}`
        }

        /**
         *
         * @method 获取时间对象
         * @param time:{number|string}:时间
         * @param seconds:{boolean}:是否是秒
         *
         * @returns Date
         *
         * */
        function getDate(time) {
            if (typeof time === 'number') return new Date(time);
            return new Date(time.toString().replace(/-/g, '/'))
        }
    </script>

</body>

</html>